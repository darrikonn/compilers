program -> class id { variable_declarations method_declarations }
variable_declarations -> type variable_list ; variable_declarations | E
type -> int | real
variable_list -> variable variable_list'
variable_list' -> , variable variable_list' | E
variable -> id variable'
variable' -> [ num ] | E
method_declarations -> more_method_declarations method_declaration | E
more_method_declarations -> method_declaration more_method_declarations | E
method_declaration -> static method_return_type id ( parameters ) { variable_declarations statement_list }
method_return_type -> type | void
parameters -> parameter_list | E
parameter_list -> type id parameter_list'
parameter_list' -> , type id parameter_list' | E
statement_list -> statement statement_list | E
statement -> statement' ; | if ( expression ) statement_block optional_else 
                | for ( variable_loc = expression ; expression ; incr_decr_var ) statement_block | statement_block
statement' -> variable_loc = expression | id ( expression_list ) | return optional_expression | break | continue | incr_decr_var
optional_expression -> expression | E
statement_block -> { statement_list }
incr_decr_var -> variable_loc incdecop
optional_else -> else statement_block | E
expression_list -> expression more_expressions | E
more_expressions -> , expression more_expressions | E
expression -> simple_expression expression'
expression' -> relop simple_expression | E
simple_expression -> term simple_expression' | sign term simple_expression'
simple_expression' -> addop term simple_expression' | E
term -> factor term'
term' -> mulop factor term' | E
factor -> variable_loc | id ( expression_list ) | num | ( expression ) | ! factor
variable_loc -> id variable_loc'
variable_loc' -> [ expression ] | E
sign -> + | -
